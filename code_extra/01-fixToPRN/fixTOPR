//中缀表达式转前缀表达式（波兰表达式）
vector<char> infixToPN(const string &token)
{
	vector<char> v1;
	int len = token.size();
	if (len == 0)
		return v1;

	stack<char> opstack; //存放运算符的栈
	stack<char> s2; //存放中间结果的栈
	for (int i = len - 1; i >= 0; i--)
	{
		if (isDigit(token[i]))
		{
			s2.push(token[i]);
		}
		else
		{
			if (token[i] == ')') //遇到右括号，则直接压栈
				opstack.push(token[i]);
			else if (token[i] == '(')//遇到左括号，则依次弹出栈中的元素，直至遇到')'
			{
				while (opstack.top() != ')')
				{
					s2.push(opstack.top());
					opstack.pop();
				}
				opstack.pop();
			}
			while (isOperator(token[i]))//如果是运算符
			{
				if (opstack.empty() || token[i] == ')' || pirority(token[i]) > pirority(opstack.top()))//遇到运算符优先级大于栈顶元素，压入栈中保存
				{
					opstack.push(token[i]);
					break;
				}else	//新来的元素优先级低， 则一直出栈
				{				
					s2.push(opstack.top());
					opstack.pop();				
				}
			}
			
		}
	}
	while (!opstack.empty())//输入结束，将栈中剩余操作符出栈输出
	{
		s2.push(opstack.top());
		opstack.pop();
	}
	while (!s2.empty())//输入结束，将栈中剩余操作符出栈输出
	{
		v1.push_back(s2.top());
		s2.pop();
	}
	return v1;
}

//计算前缀表达式的值
int evalPN(string &tokens)
{
	if (tokens.size() <= 0)
		return 0;
	stack<int> s1;//创建辅助栈
	stack<int> s2;//创建结果栈
	int left = 0, right = 0;//定义左/右操作数
	int result = 0;//定义中间结果
	string temp;
	for (unsigned int i = 0; i < tokens.size(); i++)
	{

		if (isOperator(tokens[i]))//扫描运算符则入栈
		{
			s1.push(tokens[i]);
		}
		else if (tokens[i] == ' ')
		{
			if (temp.size() > 0)   //防止运算符后面跟分隔符，所以判断一下temp里面是否有数字
			{
				s2.push(atoi(temp.c_str()));
				temp.clear();
			}
		}
		else if (isDigit(tokens[i]) && s2.empty())
		{
			temp.push_back(tokens[i]);
		}
		else if (isDigit(tokens[i]) && !s1.empty() && !s2.empty())
		{	
			while (tokens[i] != ' ')
			{
				temp.push_back(tokens[i]);
				i++;
			}
			if (temp.size() > 0)   //防止运算符后面跟分隔符，所以判断一下temp里面是否有数字
			{
				s2.push(atoi(temp.c_str()));
				temp.clear();
			}
			
			right = s2.top();
			s2.pop();

			left = s2.top();
			s2.pop();

			result = cal(left, right, s1.top());
			s1.pop();
			s2.push(result);//s2保留中间结果
		}

	}
	if (!s2.empty())
	{
		result = s2.top();
		s2.pop();
	}

	return result;
}
