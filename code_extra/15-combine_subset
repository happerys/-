#pragma once
#include <vector>
#include <iostream>
#include <string>
#include <assert.h>
#include <algorithm>
using namespace std;

/**************输出全组合***************/
//遍历第k位的所有可能
void dfs_subsets(vector<int> &nums, int count, int start, int k, vector<int> &v, vector<vector<int>> &res)
{
	if (count >= k)//单次递归终止条件
	{
		res.push_back(v);
		return;
	}

	for (int i = start; i < nums.size(); i++)
	{
		v.push_back(nums[i]);
		dfs_subsets(nums, count + 1, i + 1, k, v, res);
		v.pop_back();
	}
}
vector<vector<int>> subsets(vector<int>& nums)
{
	vector<vector<int>> res;
	vector<int> v;
	for (int i = 0; i <= nums.size(); i++)
		dfs_subsets(nums, 0, 0, i, v, res);
	return res;
}


/************** 全排列  (递归实现) ***************/
void dfs_permutation(vector<int> &nums,  int start, int end, vector<vector<int>> &res)
{
	if (start == end)//单次递归终止条件
	{
		res.push_back(nums);
		return;
	}
	else
	{
		for (int i = start; i <= end; i++)
		{
			swap(nums[start], nums[i]);
			dfs_permutation(nums, start + 1, end, res);
			swap(nums[start], nums[i]);
		}
	}
	
}


vector<vector<int>> permutation(vector<int>& nums)
{
	vector<vector<int>> res;
	dfs_permutation(nums, 0, nums.size() - 1, res);
	return res;
}

/************** 全排列  (STL非递归实现) ***************/
vector<vector<int>> permutation_STL(vector<int>& nums)
{
	vector<vector<int>> res;
	sort(nums.begin(), nums.end());
	do {
		res.push_back(nums);
	} while (next_permutation(nums.begin(), nums.end()));
	return res;
}

int main()
{
	cout << "输出全组合" << endl;
	vector<int>  v1 = {1,2,3,4};
	vector<vector<int>> v1_out = subsets(v1);
	for (int i = 0; i < v1_out.size(); i++)
	{
		for (int j = 0; j < v1_out[i].size(); j++)
		{
			cout << v1_out[i][j] << " ";
		}
		cout << endl;
	}
	cout << "输出全排列" << endl;
	vector<int>  v2 = { 5,6,7,8 };
	vector<vector<int>> v2_out = permutation(v2);
	for (int i = 0; i < v2_out.size(); i++)
	{
		for (int j = 0; j < v2_out[i].size(); j++)
		{
			cout << v2_out[i][j] << " ";
		}
		cout << endl;
	}
	cout << "STL输出全排列" << endl;
	vector<int>  v3 = { 5,6,7,8 };
	vector<vector<int>> v3_out = permutation_STL(v3);
	for (int i = 0; i < v3_out.size(); i++)
	{
		for (int j = 0; j < v3_out[i].size(); j++)
		{
			cout << v3_out[i][j] << " ";
		}
		cout << endl;
	}
	system("pause");
	return 0;

}
