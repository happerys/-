//https://blog.csdn.net/desirepath/article/details/71679170
//https://www.jianshu.com/p/0b9018bbacd7
/**************************************1. 01背包**************************************************************/
//优化空间复杂度  O(N)
        1）题目：
        有n件物品和一个容量为w的背包。
        第i件物品的重量是w[i]，价值是p[i]。
        求解将哪些物品装入背包可使价值总和最大
        2）输入：
        物品数 背包大小 
        n个物品的wi和pi
        3）测试文件：
        4 10
        2 4
        3 5
        4 6
        5 10

        5 20
        3 2
        7 3
        10 5
        15 6
        16 10
        4）代码
![image](https://upload-images.jianshu.io/upload_images/1727685-c3d5b6cbe772b226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/521)
        //要求在每次主循环中我们以v ←V ... 0 的递减顺序计算dp[v]，这样才能保证计算dp[v] 时dp[v -Ci] 保存的是状态dp[i - 1; v - Ci] 的值
        //dp数组当前索引的值的计算依赖于前面索引的值，不会使用到被更新过的值
        '''
        
        '''
        '''
        #include <iostream>
        #include <algorithm>
        #include <vector>
        using namespace std;
        
        int main(void) {
        int n, w;   //物品总件数， 背包容量
        while (cin >> n >> w)
        {
        int  wi, pi;//单个物品的重量，价值
        vector<int> dp(w + 1, 0);
        for (int i = 0; i < n; i++)
        {
          cin >> wi >> pi;
          for (int j = w; j >= 0; j--)
          {
            if(j >= wi)
                dp[j] = max(dp[j], dp[j - wi] + pi);
          }	
        }
        cout << dp[w] << endl;
        system("pause");
        }
        return 0;
        }
        '''
/******************************完全背包问题*********************************************/
//优化空间复杂度  O(N)
        1）题目：
        有n件物品和一个容量为w的背包，每种物品都有无限件可用。
        第i种物品的重量是w[i]，价值是p[i]。
        求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。
        2）输入：
        测试用例数 
        物品数 背包容量
        n个物品的wi和ci
        3)测试文件
        4 10
        2 4
        3 5
        4 6
        5 10

        5 20
        3 2
        7 3
        10 5
        15 6
        16 10
        4）代码
![image](https://upload-images.jianshu.io/upload_images/1727685-490e176d0890cc94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/401)
![image](https://upload-images.jianshu.io/upload_images/1727685-adc801365bdf8c99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/513)
 //优化空间复杂度  O(N)
        
   '''  #include <iostream>
        #include <algorithm>
        #include <vector>
        using namespace std;
        
        int main(void) {
                int n, w;   //物品总件数， 背包容量
                while (cin >> n >> w)
                {
                        cout << "开始输入" << endl;
                        int  wi, pi;//重量，价值
                        vector<int> dp(w + 1, 0);
                        for (int i = 0; i < n; i++)
                        {
                            cin >> wi >> pi;
                                for (int j = 0; j <= w; j++)
                                {
                                        if(j >= wi)
                                            dp[j] = max(dp[j], dp[j - wi] + pi);
                                }	
                        }
                        cout << dp[w] << endl;
                        system("pause");
                }

                return 0;
        }
     '''
/***************************多重背包*****************************************************/
        1）题目：
        有n种物品和一个容量为w的背包。
        第i种物品最多有n[i]件可用，每件重量是w[i]，价值是p[i]。
        求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。
        2）输入：
        测试用例数 
        物品数 背包容量
        n个物品的ni wi pi
        3)测试文件
        3 10
        1 1 10
        2 2 4
        3 3 11

        4 20
        5 2 5
        2 3 6
        3 4 8
        1 6 19
        4）代码
        #include <iostream>
        #include <algorithm>
        #include <vector>
        using namespace std;

        int w;//定义背包总容量
        //优化空间复杂度  O(N)

        void ZeroOnePack(int wi, int pi, vector<int>&dp) {
          for (int j = w; j >= 0; j--)
            if (j >= wi)
              dp[j] = max(dp[j], dp[j - wi] + pi);
        }

        void CompletePack(int wi, int pi, vector<int>&dp) {
          for (int j = 0; j <= w; j++)
            if (j >= wi)
              dp[j] = max(dp[j], dp[j - wi] + pi);
        }

        void MultiplePack(int ni, int wi, int pi, vector<int>&dp) {
          if (ni * wi >= w) {
            CompletePack(wi, pi, dp);
            return;
          }
          int k = 1, amount = ni;
          while (k < ni) {
            ZeroOnePack(wi * k, pi * k, dp);
            amount -= k;
            k *= 2;
          }
          ZeroOnePack(wi * amount, pi * amount, dp);
        }

        int main(void) {
          int n;   //物品总件数， 背包容量
          while (cin >> n >> w)
          {
            cout << "开始输入" << endl;
            int  ni, wi, pi;//每种物品数量，重量，价值
            vector<int> dp(w + 1, 0);
            for (int i = 0; i < n; i++)
            {
              cin >> ni >> wi >> pi;
              MultiplePack(ni, wi, pi, dp);
            }
            cout << dp[w] << endl;
            system("pause");
          }

          return 0;
        }
/****************************混合三种背包**************************************************/
      1）问题：
      有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。
      应该怎么求解呢？
      2）输入：
      测试用例数
      物品数 背包容量
      第i种物品的ni(无限次的标为-1) wi pi
      3)测试用例

      3 10
      -1 1 2
      2 2 5
      1 3 7

      4 20
      3 2 5
      4 4 6
      -1 6 8
      1 7 10
      4）测试代码
      #include <iostream>
      #include <algorithm>
      #include <vector>
      using namespace std;

      int w;//定义背包总容量
          //优化空间复杂度  O(N)

      void ZeroOnePack(int ci, int wi, vector<int>&dp) {
        for (int j = w; j >= 0; j--)
          if (j >= ci)
            dp[j] = max(dp[j], dp[j - ci] + wi);
      }

      void CompletePack(int ci, int wi, vector<int>&dp) {
        for (int j = 0; j <= w; j++)
          if (j >= ci)
            dp[j] = max(dp[j], dp[j - ci] + wi);
      }

      void MultiplePack(int ni, int ci, int wi, vector<int>&dp) {
        if (ni * ci >= w) {
          CompletePack(ci, wi, dp);
          return;
        }
        int k = 1, amount = ni;
        while (k < ni) {
          ZeroOnePack(ci * k, wi * k, dp);
          amount -= k;
          k *= 2;
        }
        ZeroOnePack(ci * amount, wi * amount, dp);
      }


      int main(void) {
        int n;   //物品总件数， 背包容量
        while (cin >> n >> w)
        {
          cout << "开始输入" << endl;
          int  ni, wi, pi;//每种物品数量，重量，价值
          vector<int> dp(w + 1, 0);
          for (int i = 0; i < n; i++)
          {
            cin >> ni >> wi >> pi;
            if (ni == 1) ZeroOnePack(wi, pi, dp);
            else if (ni == -1) CompletePack(wi, pi, dp);
            MultiplePack(ni, wi, pi, dp);
          }
          cout << dp[w] << endl;
          system("pause");
        }

        return 0;
      }
/*********************************二维费用的背包*********************************************************/   
      1）问题：
      对于每件物品，具有两种不同的费用；
      选择这件物品必须同时付出这两种代价；
      对于每种代价都有一个可付出的最大值（背包容量）。
      问怎样选择物品可以得到最大的价值。
      第i件物品所需的两种代价分别为a[i]和b[i]。
      两种代价可付出的最大值（两种背包容量）分别为V和U。物品的价值为p[i]。
      2）输入：
      测试用例数
      物品数 第一个背包容量v 第二个背包容量u
      第i个物品的ai bi pi
      3）测试文件：
      3 10 5
      1 2 4
      2 1 4
      4 4 6

      4 5 6
      1 1 3
      1 2 4
      2 1 4
      3 4 7
      4)
      #include <iostream>
      #include <algorithm>
      #include <vector>
      using namespace std;


      int main(void) {
        int n, v, u, ai, bi, wi;
        while (cin >> n >> v >> u) {
          vector<vector<int>> dp(v + 1, vector<int>(u + 1, 0));
          for (int i = 0; i < n; i++) {
            cin >> ai >> bi >> wi;
            for (int j = v; j >= 0; j--) {
              for (int k = u; k >= 0; k--) {
                if (ai <= j && bi <= k)
                  dp[j][k] = max(dp[j][k], dp[j - ai][k - bi] + wi);
              }
            }
          }
          cout << dp[v][u] << endl;
          system("pause");
        }

        return 0;
      }
/*********************************分组背包*********************************************************/      
        1）问题：
        有n件物品和一个容量为v的背包。
        第i件物品的重量是w[i]，价值是p[i]。
        这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。
        求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。
        2）输入：
        测试用例数 
        物品数 背包容量 组数g(组号范围：0 ~ g-1)
        第i件物品的wi pi gi(所属组号)
        3）测试文件：
        4 10 2
        3 5 0
        4 6 0
        2 7 1
        1 6 1

        5 10 3
        1 3 0
        2 4 0
        3 5 1
        4 7 1
        5 8 2
        4)代码
        #include <iostream>
        #include <algorithm>
        #include <vector>
        using namespace std;


        int main(void) {
          int  n, v, g, gi;

          while (cin >> n >> v >> g) {
            vector<int> dp(v + 1, 0);
            vector<int> wi(n + 1 , 0);
            vector<int> pi(n + 1, 0);
            vector<vector<int> > gMap(g);
            for (int i = 0; i < n; i++) {
              cin >> wi[i] >> pi[i] >> gi;
              gMap[gi].push_back(i);
            }

            for (int i = 0; i < g; i++) {
              for (int j = v; j >= 0; j--) {
                for (int k = 0; k < gMap[i].size(); k++) {
                  if (j >= wi[gMap[i][k]])
                    dp[j] = max(dp[j], dp[j - wi[gMap[i][k]]] + pi[gMap[i][k]]);
                }
              }
            }

            cout << dp[v] << endl;
          }


          return 0;
        }
/*********************************有依赖的背包*********************************************************/  
        1）题目：
        这种背包问题的物品间存在某种“依赖”的关系。
        也就是说，i依赖于j，表示若选物品i，则必须选物品j。
        为了简化起见，我们先设没有某个物品既依赖于别的物品，又被别的物品所依赖；
        另外，没有某件物品同时依赖多件物品。
        2）输入：
        测试用例数 
        物品数 背包大小
        第i个物品的wi pi di(依赖物品的编号，-1为不依赖其他物品)
        #include <iostream>
        #include <algorithm>
        #include <vector>
        using namespace std;


        int main(void) {
          int  n, v,  di;
          while (cin >> n >> v) {
            vector<int> dp(v + 1, 0);

            vector<int> wi(v + 1, 0);
            vector<int> pi(v + 1, 0);
            // group[i]空表示i号物品有依赖，因此存放到其他组里
            // 只有一个元素表示i号物品既无依赖也不被依赖
            // 有多个元素表示i号物品被依赖，这里自己的编号i也被存放进group[i]
            vector<vector<int> > groups(n);

            // 读入数据并储存起来
            for (int i = 0; i < n; i++) {
              cin >> wi[i] >> pi[i] >> di;
              if (di == -1) groups[i].push_back(i);
              else groups[di].push_back(i);
            }

            // 对每个有多个元素的组进行01背包
            for (int i = 0; i < n; i++) {
              if (groups[i].size() > 1) {
                vector<int> giOri; //group[i]的拷贝，排除i本身
                int newV = v - wi[i];

                // 复制group[i]中的元素，排除i
                for (int j = 0; j < groups[i].size(); j++) {
                  if (groups[i][j] != i)
                    giOri.push_back(groups[i][j]);
                }

                // 把等效物品组存入group[i]中
                groups[i].clear();
                groups[i].resize(newV + 1, 0);
                for (int j = 0; j < giOri.size(); j++) {
                  for (int k = newV; k >= 0; k--) {
                    if (wi[giOri[j]] <= k) {
                      groups[i][k] = max(groups[i][k], groups[i][k - wi[giOri[j]]] + pi[giOri[j]]);
                    }
                  }
                }
              }
            }

            // 进行分组背包
            for (int i = 0; i < n; i++) {
              if (groups[i].size() == 0) continue;
              else if (groups[i].size() == 1) { // i物品无依赖且不被依赖
                for (int j = v; j >= 0; j--) {
                  if (j >= wi[i])
                    dp[j] = max(dp[j], dp[j - wi[i]] + pi[i]);
                }
              }
              else { // i物品被依赖, i组第k个物品的cost为k + ci[i], weight为group[i][k] + wi[i]
                for (int j = v; j >= 0; j--) {
                  for (int k = 0; k < groups[i].size(); k++) {
                    if (j >= k + wi[i])
                      dp[j] = max(dp[j], dp[j - k - wi[i]] + groups[i][k] + pi[i]);
                  }
                }
              }
            }

            cout << dp[v] << endl;
          }
          return 0;
        }
        代码二：
        case:
        1000 5
        800 2 0
        400 5 1
        300 5 1
        400 3 0
        500 2 0
        #include <bits/stdc++.h>（有漏洞）
        using namespace std;

        int main()
        {
            int v[61];
            int q[61];
            int vp[61];
            int N,m;
            while(cin >> N >> m)//总钱数，购买物品个数
            {
                vector<vector<int>> dp(m + 1,vector<int>(N +1, 0));
                vector<int> v(m +1, 0);
                vector<int> q(m +1, 0);
                vector<int> vp(m +1, 0);
                int tmpw;
                for(int i=1;i<=m;i++)
                {
                    cin >> v[i] >> tmpw >> q[i];
                    vp[i] = v[i] * tmpw;
                }
                for(int i=1;i<=m;i++)
                {
                    for(int j= 1;j<=N;j++)
                    {
                        if(q[i] == 0)
                        {
                            if(v[i]<=j)
                            {
                                dp[i][j] = max(dp[i-1][j-v[i]]+vp[i], dp[i-1][j]);
                            }
                        }
                        else
                        {
                            if(v[i] + v[q[i]] <= j)
                            {
                                dp[i][j] = max(dp[i-1][j-v[i]]+vp[i], dp[i-1][j]);
                            }
                        }
                    }
                }
                cout << dp[m][N] << endl;
            }
            return 0;
        }
        (已优化过)
        #include <iostream>
        #include <algorithm>
        #include <vector>
        using namespace std;

        int MaxN = 60;
        int MaxM = 32000;

        int main()
        {
                int n, m;
                while (cin >> n >> m)//总钱数，购买物品个数
                {
                        n = n / 10;

                        vector<int> V(MaxN + 1);
                        vector<int> P(MaxN + 1);
                        vector<int> Q(MaxN + 1);
                        vector<int> W(MaxN + 1);
                        vector<vector<int>> f(MaxN + 1, vector<int>(MaxM + 1));
                        vector<int> F(MaxM/10);
                        vector<vector<int>> s(MaxN + 1, vector<int>(MaxN + 1));
                        vector<int> s_ind(MaxN + 1);
                        //初始化数据
                        for (int i = 1; i <= m; i++) {
                                cin >> V[i] >> P[i] >> Q[i] ;
                                V[i] = V[i] / 10;//价格为10的倍数，优化
                                W[i] = V[i] * P[i];

                                if (Q[i]>0) {//即编号为i的物品为附件
                                        s[Q[i]][s_ind[Q[i]]] = i;//该附件所属的主件Q[i]的附件值置为i，随着s_ind[Q[i]]的增加，二维数组的第二维坐标也在变动
                                        s_ind[Q[i]]++;//该主件Q[i]的附件数量加一
                                }
                        }

                        for (int i = 1; i <= m; i++) {
                                //如果物品i是附件，跳过这次循环
                                if (Q[i] > 0)
                                        continue;
                                //i是主件,对每个主件的附件组进行一次01背包                 
                                for (int j = 0; j<s_ind[i]; j++) {
                                        int temp = s[i][j];//i的某个附件的编号

                                        for (int k = n - V[i]; k >= V[temp]; k--)//k的变动范围是该附件的价格到最大费用减主件价格
                                                f[i][k] = max(f[i][k], f[i][k - V[temp]] + W[temp]);
                                }

                                //对所有主件以及其附件的物品组做一次背包,j相当于背包剩余容量，k相当于不断往背包里面加的物品组
                                for (int j = n; j >= V[i]; j--) {
                                        for (int k = j; k >= V[i]; k--) {
                                                F[j] = max(F[j], F[j - k] + W[i] + f[i][k - V[i]]);
                                        }
                                }
                        }
                        cout << F[n] * 10 << endl;
                        system("pause");
                }
                return 0;
        }

        4）测试文件：
        3 10
        3 5 -1
        4 6 0
        7 10 0

        4 15
        4 1 -1
        6 8 0
        7 10 0
        10 4 -1
        8. 泛化物品
        1）题目：
        在背包容量为v的背包问题中，泛化物品是一个定义域为0..v中的整数的函数h，当分配给它的费用为v时，能得到的价值就是h(v)。
        为了应用泛化物品思想，这里假设题目为：存在依赖关系树（简单起见，只有一个根节点），即有依赖的物品也可以被依赖，可结合原文7.3节来理解此句。
        2）输入：
        测试用例数
        物品数 背包容量 根节点编号
        第i个物品的wi pi di(依赖物品的编号，-1为不依赖其他物品)
        3）测试文件：
        5 5 0
        1 2 -1
        2 7 0
        2 5 0
        2 6 2
        1 4 2

        6 5 0
        1 2 -1
        1 3 0
        2 3 0
        2 4 0
        2 7 2
        3 10 2
         4）代码文件：
        #include <iostream>
        #include <algorithm>
        #include <vector>
        using namespace std;

        #define maxN 100   //最大物品数
        #define maxV 1000  //最大背包容量

        int n, v;
        int cnt = 0;
        int head[maxN];
        int wi[maxN], pi[maxN];
        int f[maxN][maxV];

        struct Edge {
                int v, next;
        } e[maxN - 1];

        void addEdge(int u, int v) {
                e[cnt].v = v;
                e[cnt].next = head[u];
                head[u] = cnt++;
        }

        void treeDP(int u) {
                for (int i = wi[u]; i <= v; i++) {
                        f[u][i] = pi[u];
                }
                for (int i = head[u]; i != -1; i = e[i].next) {
                        int curr = e[i].v;
                        treeDP(curr);
                        for (int j = v; j >= 0; j--) {
                                for (int k = j - wi[u]; k >= 0; k--) {
                                        f[u][j] = max(f[u][j], f[u][j - k] + f[curr][k]);
                                }
                        }
                }
        }

        int main(void) {
                int root;
                while (cin >> n >> v >> root) {
                        cnt = 0;
                        memset(head, -1, sizeof(head));
                        memset(f, 0, sizeof(f));
                        for (int i = 0; i < n; i++) {
                                int di;
                                cin >> wi[i] >> pi[i] >> di;
                                addEdge(di, i);
                        }
                        treeDP(root);
                        cout << f[root][v] << endl;
                }
        }
        9. 背包问题的变化
        1）题目：
        输出01背包的具体方案
        2）输入：
        同01背包
        3）测试文件：
        4 10
        2 4
        3 5
        4 6
        5 10

        5 20
        3 2
        7 3
        10 5
        15 6
        16 10
        4）源代码：
        #include <iostream>
        #include <algorithm>
        #include <vector>
        using namespace std;

        int main(void) {
                int n, v,  pi;

                while (cin >> n >> v) {
                        vector<int> dp(v + 1, 0);
                        vector<int> wi(n + 1, 0);
                        vector<vector<int>> g(n + 1,vector<int>(v + 1, 0));
                        //g[i][v]=0 表示没放i时的f(i, v)较大，
                        //g[i][v]=1 表示放进i时的f(i, v)较大
                        for (int i = 0; i < n; i++) {
                                cin >> wi[i] >> pi;
                                for (int j = v; j >= 0; j--) {
                                        if (j >= wi[i]) {
                                                if (dp[j - wi[i]] + pi > dp[j]) {
                                                        dp[j] = dp[j - wi[i]] + pi;
                                                        g[i][j] = 1;
                                                }
                                        }
                                }
                        }

                        int i = n - 1, j = v;
                        while (i >= 0) {
                                if (g[i][j] == 1) {
                                        cout << "选了" << i + 1 << endl;
                                        j -= wi[i];
                                }
                                else {
                                        cout << "没选" << i  + 1<< endl;
                                }
                                i--;
                        }
                        cout << endl;
                }
        }
