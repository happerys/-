https://blog.csdn.net/zhaohengchuan/article/details/78461073
给一 只含有正整数的非空数组, 找到这个数组是否可以划分为 两个 元素和相等的子集。

注意事项： 
所有数组元素不超过100. 
数组大小不超过200.

样例： 
给一数组 [1, 5, 11, 5] , 返回 true , 
两个子集:[1, 5, 5], [11] 
给一数组 [1, 2, 3, 9] , 返回 false

思路： 
动态规划，对于数组nums，判断奇偶性，若为奇数，肯定不可能分成两个相等的数， 
若为偶数，令sum为数组nums元素和的一半。构建数组dp[len][sum],dp[i][j]表示nums的第一个元素到 
第i个元素构成的集合中，是否存在使得和为j的子集。 
状态转换方程为： 
dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]], j>= nums[i - 1];
           dp[i - 1][j],                               otherwise
#include <iostream>
#include <vector>
using namespace std;

bool canPartition(vector<int> &nums) {
	
	int sum = 0;
	for (auto c : nums)
		sum += c;
	if (sum % 2 != 0)
		return false;
	else
		sum /= 2;
	int len = nums.size();
	vector<vector<bool>> dp(len + 1, vector<bool>(sum + 1, false));
	for (int i = 0; i <= len; ++i)
		dp[i][0] = true;
	for (int i = 1; i <= len; ++i)
	{
		for (int j = 1; j <= sum; ++j)
		{
			if (j >= nums[i - 1])
				dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]];
			else
				dp[i][j] = dp[i - 1][j];
		}
	}
	return dp[len][sum];
}

int main() {
	int N;
	while (cin >> N)
	{
		vector<int> data(N);
		for (int i = 0; i < N; i++)
		{
			cin >> data[i];
		}
		if (canPartition(data))
		{
			cout << "true" << endl;
		}
		else
		{
			cout << "false" << endl;
		}
	}
	return 0;
}
